AWSTemplateFormatVersion: '2010-09-09'
Description: Static Website Creation for ${FQDN}
Resources:

  Certificate: 
    Type: AWS::CertificateManager::Certificate
    Properties: 
      DomainName: ${FQDN}
      DomainValidationOptions:
        - DomainName:   ${FQDN}
          HostedZoneId: !ImportValue ${DNSSTACK}-ZoneId
      ValidationMethod: DNS

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${BUCKETNAME}
      LifecycleConfiguration:
        Rules:
          - Id: Standard-IA-Storage
            Status: Enabled
            Transitions:
              - TransitionInDays: 60
                StorageClass: STANDARD_IA
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - HEAD
              - PUT
              - POST
              - DELETE
            AllowedOrigins:
              - '*'
            ExposedHeaders:
              - x-amz-server-side-encryption
            Id: CORSRuleId1
      Tags:
        - Key: Name
          Value: ${BUCKETNAME}
        - Key: role
          Value: storage
    DependsOn: CloudFrontOriginAccessIdentity

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'S3Bucket'
      PolicyDocument:
        Id: OriginAccessBucketPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: AllowOringAccessRead
            Action:
              - s3:GetObject
            Effect: Allow
            Resource:
              - 'arn:aws:s3:::${BUCKETNAME}/*'
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
    DependsOn: S3Bucket
  
  LambdaEdgeFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: ${DEPLOYBUCKET}
        S3Key: functions/${PROJECT}-sec-hdrs.zip
      Description: ${PROJECT}
      FunctionName: '${PROJECT}-sec-hdrs'
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaEdgeFunctionRole.Arn
      Runtime: 'nodejs12.x'
      Timeout: 25
      Tags:
        - Key: Name
          Value: ${PROJECT}-Lambda-Function
        - Key: role
          Value: lamdba-function

  Lambdaversion:
    Type: AWS::Lambda::Version
    Properties: 
      FunctionName: !Ref LambdaEdgeFunction
      Description: v1

  LambdaEdgeFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Sid: 'AllowLambdaServiceToAssumeRole'
            Effect: 'Allow'
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
              - 'lambda.amazonaws.com'
              - 'edgelambda.amazonaws.com'

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - ${FQDN}
        DefaultCacheBehavior:
          Compress: true
          DefaultTTL: 0
          ForwardedValues:
            Cookies:
              Forward: all
            QueryString: true
          MaxTTL: 31536000
          TargetOriginId: ${FQDN}-${BUCKETNAME}
          LambdaFunctionAssociations:
            - 
              EventType: origin-response
              LambdaFunctionARN: !Ref Lambdaversion
          ViewerProtocolPolicy: 'redirect-to-https'
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: '/index.html'
          - ErrorCachingMinTTL: 0
            ErrorCode: 403
            ResponseCode: 403
            ResponsePagePath: '/index.html'
        Enabled: true
        HttpVersion: 'http2'
        DefaultRootObject: 'index.html'
        IPV6Enabled: true
        Logging:
          Bucket: ${BUCKETNAME}.s3.us-east-1.amazonaws.com
          IncludeCookies: false
          Prefix: 'cdn/'
        Origins:
          - DomainName: ${BUCKETNAME}.s3.us-east-1.amazonaws.com
            Id: ${FQDN}-${BUCKETNAME}
            S3OriginConfig:
              OriginAccessIdentity:
                !Join ['', ['origin-access-identity/cloudfront/', !Ref CloudFrontOriginAccessIdentity]]
        PriceClass: 'PriceClass_All'
        ViewerCertificate:
          AcmCertificateArn: !Ref 'Certificate'
          MinimumProtocolVersion: 'TLSv1.1_2016'
          SslSupportMethod: 'sni-only'
      Tags:
        - Key: Name
          Value: ${PROJECT}
        - Key: role
          Value: cloudfront-distribution

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'CloudFront OAI for ${FQDN}'
        
  Route53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !ImportValue ${DNSSTACK}-ZoneId
      # Use this Recordset block if the site will NOT be behind Okta
      RecordSets:
      - Name: ${FQDN}
        Type: 'A'
        AliasTarget:
          DNSName: !GetAtt 'CloudFrontDistribution.DomainName'
          EvaluateTargetHealth: false
          # The  following HosteZoneId is always used for alias records pointing to CF.
          HostedZoneId: Z2FDTNDATAQYW2